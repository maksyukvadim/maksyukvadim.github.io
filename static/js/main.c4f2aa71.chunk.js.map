{"version":3,"sources":["assets/fonts/GT-America-Extended-Medium.otf","assets/fonts/GT-America-Extended-Bold.otf","components/NoMatch/img/404.png","constants/theme.js","assets/styles/ThemeProvider.js","assets/fonts/index.js","components/NoMatch/styles.js","components/NoMatch/index.js","components/NavigationPanel/NavigationMenu/styles.js","components/NavigationPanel/NavigationMenu/index.js","components/NavigationPanel/styles.js","components/Logo/styles.js","components/Logo/index.js","utils/routerUtils.js","components/NavigationPanel/index.js","components/TableRow/styles.js","components/TableRow/index.js","constants/developers.js","Pages/developers/DevelopersTable/index.js","components/FormDialog/styles.js","components/FormDialog/index.js","Pages/developers/SkillsSelector/index.js","Pages/developers/RateInput/index.js","Pages/developers/CreateUserForm/styles.js","Pages/developers/RoleSelector/index.js","Pages/developers/CreateUserForm/index.js","utils/developersUtils.js","components/AddButton/styles.js","components/AddButton/index.js","services/api/constants.js","services/api/AuthService.js","store/AuthStore.js","services/api/LogService.js","store/LogStore.js","services/api/LogTypesService.js","store/LogTypesStore.js","store/LoadersStore.js","services/api/ProjectService.js","store/ProjectStore.js","services/api/UserService.js","store/UserStore.js","store/index.js","Pages/developers/styles.js","constants/projects.js","Pages/projects/ProjectsTable/index.js","Pages/projects/UserMultiSelect/index.js","Pages/projects/TypeSelector/index.js","Pages/projects/CreateProjectForm/styles.js","Pages/projects/CreateProjectForm/index.js","utils/projectUtils.js","Pages/projects/styles.js","components/WeekSelector/index.js","components/WeekDates/index.js","constants/dateFormats.js","constants/developerReport.js","Pages/developer-reports/ReportTable/index.js","components/TimePicker/index.js","Pages/developer-reports/Selector/styles.js","Pages/developer-reports/Selector/index.js","Pages/developer-reports/ReportForm/styles.js","utils/developerReportUtils.js","Pages/developer-reports/ReportForm/index.js","Pages/developer-reports/NoteTitle/index.js","Pages/signin/styles.js","navigation/rules.js","navigation/routes.js","Pages/home/index.js","Pages/signin/index.js","Pages/developer-reports/index.js","Pages/manager-reports/index.js","Pages/projects/index.js","Pages/developers/index.js","Pages/report-history/index.js","navigation/index.js","components/PageLoader/styles.js","components/PageLoader/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","palette","primary","main","logo","children","StylesProvider","injectFirst","createGlobalStyle","AmericaMedium","AmericaBold","PageWrapper","styled","div","PageContainer","backgroundImg","Content","MainText","p","SecondaryText","NoMatch","history","onClick","push","StyledLink","NavLink","dark","useStyles","makeStyles","list","width","fullList","menuButton","color","active","background","NavigationMenu","anchor","menuItems","classes","React","useState","left","state","setState","toggleDrawer","open","event","type","key","IconButton","aria-label","className","Drawer","onClose","clsx","role","onKeyDown","List","to","exact","ListItem","button","ListItemText","map","path","name","Divider","grey","Shape","span","SIZE","ShapeContainer","Text","LogoContainer","Logo","ROUTES","Object","freeze","ROUTES_FOR_DEV","ROUTES_FOR_ADMIN","BY_ROLE","admin","dev","root","flexGrow","marginRight","spacing","title","NavigationPanel","me","routes","routesByRole","filter","includes","getRoutesByRole","get","AppBar","position","Toolbar","Typography","variant","Avatar","Button","StyledTableRow","TableRow","props","hover","TABLE_HEADERS","DEFAULT_FORM_VALUES","firstname","lastname","skills","email","rate","country","developerList","setEditingUserData","TableContainer","component","Paper","Table","TableHead","item","TableCell","TableBody","length","developer","id","scope","join","projects","total","StyledDialog","Dialog","FormDialog","handleClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","EMPTY_OPTIONS","SkillMultiSelect","onChange","values","Autocomplete","multiple","options","freeSolo","value","e","newValue","inputValue","renderInput","params","TextField","label","RateInput","Number","target","StyledGridContainer","Grid","RoleSelector","RadioGroup","container","wrap","FormControlLabel","control","Radio","CreateUserForm","handleSubmit","initialData","handleDeleteUser","initialValues","keys","reduce","acc","getInitialFormValues","formik","useFormik","onSubmit","data","a","autoComplete","xs","handleChange","defaultValue","setFieldValue","justify","DialogActions","StyledAddCircleOutlineIcon","AddCircleOutlineIcon","AddButton","handleClick","startIcon","API_URL","window","authService","login","axios","post","getMe","addAuthHeaderInterceptor","token","onError","interceptors","request","use","config","headers","error","response","status","Promise","reject","AuthStore","undefined","setInitialState","onLogin","localStorage","setItem","setUserToken","console","onGetMe","dispatchLoginFulfilled","getItem","decorate","observable","ref","action","authStore","logService","getLogs","addLog","updateLog","pathId","put","deleteLog","delete","LogStore","logs","onGetLogs","onAddLog","onUpdateLog","onDeleteLog","this","logStore","logTypesService","getLogTypes","LogTypesStore","logTypes","onGetLogTypes","setLogTypes","bound","logTypesStore","LoadersStore","isLoadingPage","setLoadingPage","loadersStore","projectService","getProjectList","getProjectTypes","getProjectUserList","createProject","body","updateProject","deleteProject","fetchStrategy","update","create","ProjectStore","projectList","projectTypes","projectUserList","editingProjectData","onGetProjectList","handleFetchProjectData","actionType","onCreateProject","onUpdateProject","onDeleteProject","onGetProjectTypes","onGetProjectUserList","setEditingProjectData","project","runInAction","users","projectStore","userService","getUserList","getUser","createUser","updateUser","deleteUser","UserStore","userList","editingUserData","onGetUserList","handleFetchUserData","onCreateUser","onUpdateUser","onDeleteUser","user","userStore","useStores","useContext","MobXProviderContext","stores","StyledGrid","alias","descriptions","num_of_dev","total_log","UserMultiSelect","getOptionLabel","option","idSet","Set","has","getSelectedOptions","filterSelectedOptions","TypeSelector","LogForm","handleDeleteProject","required","multiline","fullWidth","rows","weeksCount","setWeek","selectedWeek","currentWeek","moment","week","Array","from","_","index","String","weeksOptions","setDay","selectedDay","weekDates","setWeekDates","useEffect","weekNumber","weekday","isActive","day","ButtonGroup","size","hasLogs","date","some","format","checkLogDate","formatDate","validationErrorMessages","handleEditLog","filteredLogs","setFilteredLogs","log","i","editLog","find","getProjectName","project_id","getLogTypeEnum","log_type_id","time","result","durationMin","duration","asMinutes","getTimeLabel","Developers","utils","MomentUtils","ampm","momentTime","helperText","StyledFormControl","FormControl","Selector","labelKey","valueKey","placeholder","opts","createOptions","InputLabel","Select","MenuItem","marginBottom","zIndex","from_time","to_time","getParametersForLogs","page","from_date","to_date","validate","errors","isBefore","submitForm","enableReinitialize","handleDeleteLog","workingDay","gutterBottom","sm","margin","md","NoteTitle","CardHeader","avatar","StyledContainer","authRequired","roleAdmin","rules","redirect","prop","password","setForm","useObserver","useAuthData","direction","store","useStore","isModalVisible","setModalVisibility","editingLog","setEditingLog","showModal","handleSubmitForm","Container","Box","m","minWidth","WeekSelector","WeekDates","durations","totalDurations","slice","prev","cur","add","utc","asMilliseconds","getTotalTime","ReportTable","closeModal","ProjectsTable","DevelopersTable","Navigation","compProps","route","render","every","rule","pathname","FullScreenDisabler","PageLoader","useLoadingData","LinearProgress","App","myToken","responseMe","getTokenFromLocalStorage","CssBaseline","Boolean","location","hostname","match","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c4f2aa71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GT-America-Extended-Medium.78b3d2f6.otf\";","module.exports = __webpack_public_path__ + \"static/media/GT-America-Extended-Bold.ebbc4701.otf\";","module.exports = __webpack_public_path__ + \"static/media/404.24525eca.png\";","import { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#a8bcd8\",\n        },\n        logo: \"#d1d2d4\",\n    },\n});\n\nexport default theme;\n","import React from \"react\";\n\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"../../constants/theme\";\nimport { StylesProvider } from \"@material-ui/styles\";\nimport { MuiThemeProvider } from \"@material-ui/core\";\n\nexport default function ({ children }) {\n    return (\n        <StylesProvider injectFirst>\n            <MuiThemeProvider theme={theme}>\n                <ThemeProvider theme={theme}>{children}</ThemeProvider>\n            </MuiThemeProvider>\n        </StylesProvider>\n    );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nimport AmericaMedium from \"assets/fonts/GT-America-Extended-Medium.otf\";\nimport AmericaBold from \"assets/fonts/GT-America-Extended-Bold.otf\";\n\nexport default createGlobalStyle`\n    @font-face {\n        font-family: 'GT-America';\n        src: local('GT-America'), local('GT-America'),\n        url(${AmericaMedium});\n        font-weight: 300;\n        font-style: normal;\n    };\n    @font-face {\n        font-family: 'GT-America';\n        src: local('GT-America'), local('GTAmerica'),\n        url(${AmericaBold});\n        font-weight: 600;\n        font-style: normal;\n    }\n`;\n","import styled from 'styled-components'\nimport backgroundImg from './img/404.png'\n\nexport const PageWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100vh;\n    padding-top: 10px;\n    box-sizing: border-box;\n`\n\nexport const PageContainer = styled.div`\n    width: 870px;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background: url(${backgroundImg}) no-repeat center center;\n    background-size: 100%;\n`\n\nexport const Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 380px;\n`\n\nexport const MainText = styled.p`\n    margin: 0;\n    font-size: 23px;\n    line-height: 35px;\n    margin-bottom: 40px;\n`\n\nexport const SecondaryText = styled.p`\n    margin: 0;\n    font-size: 18px;\n    line-height: 27px;\n    margin-bottom: 40px;\n`\n","// Core\nimport React from 'react'\n\n//Styles\nimport {\n    PageWrapper,\n    PageContainer,\n    MainText,\n    SecondaryText,\n    Content,\n} from './styles'\n\nconst NoMatch = ({ history }) => (\n    <PageWrapper>\n        <PageContainer>\n            <Content>\n                <MainText>\n                    Oops! The page you were looking for doesn’t exist\n                </MainText>\n                <SecondaryText>\n                    You may have misstyped the address or the page may have\n                    moved\n                </SecondaryText>\n                <div>\n                    <button\n                        onClick={() => {\n                            history.push('/')\n                        }}\n                    >\n                        Go to mainpage\n                    </button>\n                </div>\n            </Content>\n        </PageContainer>\n    </PageWrapper>\n)\n\nexport default NoMatch\n","// Core\nimport styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n    ${({ theme }) => `\n    text-decoration: none;\n    color: ${theme.palette.primary.main};\n    &.active {\n        color: ${theme.palette.primary.dark};\n    }\n  `}\n`;\n","// Core\nimport React from \"react\";\nimport clsx from \"clsx\";\n\n// UI\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\n// Styles\nimport { StyledLink } from \"./styles\";\n\nconst useStyles = makeStyles(theme => ({\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: \"auto\",\n    },\n    menuButton: {\n        color: \"#fff\",\n    },\n    active: {\n        background: \"red\",\n    },\n}));\n\nconst NavigationMenu = ({ menuItems }) => {\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        left: false,\n    });\n\n    const toggleDrawer = (anchor, open) => event => {\n        if (\n            event.type === \"keydown\" &&\n            (event.key === \"Tab\" || event.key === \"Shift\")\n        ) {\n            return;\n        }\n\n        setState({ ...state, [anchor]: open });\n    };\n\n    const list = anchor => (\n        <div\n            className={clsx(classes.list)}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n        >\n            <List>\n                <StyledLink to=\"/\" exact={true}>\n                    <ListItem button>\n                        <ListItemText primary=\"Home\" />\n                    </ListItem>\n                </StyledLink>\n                {menuItems.map(({ path, name }) => (\n                    <StyledLink to={`/${path}`} key={path}>\n                        <ListItem button>\n                            <ListItemText primary={name} />\n                        </ListItem>\n                    </StyledLink>\n                ))}\n            </List>\n            <Divider />\n        </div>\n    );\n\n    return (\n        <div>\n            <IconButton\n                aria-label=\"primary\"\n                className={classes.menuButton}\n                onClick={toggleDrawer(\"left\", true)}\n            >\n                <MenuIcon />\n            </IconButton>\n            <Drawer\n                anchor=\"right\"\n                open={state[\"left\"]}\n                onClose={toggleDrawer(\"left\", false)}\n            >\n                {list(\"left\")}\n            </Drawer>\n        </div>\n    );\n};\n\nexport default NavigationMenu;\n","// Core\nimport styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n    ${({ theme }) => `\n    text-decoration: none;\n    color: ${theme.palette.primary.dark};\n    &.active {\n        color: ${theme.palette.grey[\"700\"]};\n    }\n  `}\n`;\n","import styled from \"styled-components\";\n\nconst SIZE = 40;\n\nexport const Shape = styled.span`\n    ${({ theme }) => `\n        width: ${SIZE}px;\n    height: ${SIZE / 2}px;\n    position: relative;\n    overflow: hidden;\n    &:after {\n        content: \"\";\n        display: block;\n        position: absolute;\n        top: 0;\n        background-color: ${theme.palette.logo};\n        border-radius: 50%;\n        width: 100%;\n        height: 200%;\n    }\n    `}\n`;\n\nexport const ShapeContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: ${SIZE}px;\n    max-height: ${SIZE};\n    cursor: pointer;\n`;\n\nexport const Text = styled.div`\n    font-family: \"GT-America\";\n    text-transform: uppercase;\n    font-size: 16px;\n    font-weight: bold;\n    display: flex;\n    flex-direction: column;\n    padding-left: 11px;\n    user-select: none;\n    & > span {\n        line-height: 0.9em;\n        transform: scale(1, 0.9);\n        letter-spacing: -0.7px;\n    }\n`;\n\nexport const LogoContainer = styled.div`\n    display: flex;\n`;\n","// Core\nimport React from \"react\";\n\n//styles\nimport { Shape, ShapeContainer, Text, LogoContainer } from \"./styles\";\n\nfunction Logo() {\n    return (\n        <LogoContainer>\n            <ShapeContainer>\n                <Shape />\n                <Shape />\n            </ShapeContainer>\n            <Text>\n                <span>fountain</span>\n                <span>head</span>\n                <span>it</span>\n            </Text>\n        </LogoContainer>\n    );\n}\n\nexport default Logo;\n","const ROUTES = Object.freeze([\n    {\n        name: \"Reports\",\n        path: \"developer-reports\",\n    },\n    {\n        name: \"Reports\",\n        path: \"manager-reports\",\n    },\n    {\n        name: \"Projects\",\n        path: \"projects\",\n    },\n    {\n        name: \"Developers\",\n        path: \"developers\",\n    },\n\n    {\n        name: \"Report history\",\n        path: \"report-history\",\n    },\n]);\n\nconst ROUTES_FOR_DEV = Object.freeze([\"developer-reports\"]);\nconst ROUTES_FOR_ADMIN = Object.freeze([\n    \"report-history\",\n    \"developers\",\n    \"projects\",\n    \"manager-reports\",\n]);\n\nconst BY_ROLE = Object.freeze({\n    admin: ROUTES_FOR_ADMIN,\n    dev: ROUTES_FOR_DEV,\n});\n\nexport const getRoutesByRole = role => {\n    const routesByRole = BY_ROLE[role];\n\n    if (!routesByRole) return [];\n\n    return ROUTES.filter(({ path }) => routesByRole.includes(path));\n};\n","// Core\nimport React from \"react\";\nimport get from \"lodash.get\";\n\n// UI\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\n// Components\nimport NavigationMenu from \"./NavigationMenu\";\n\n// Styles\nimport { StyledLink } from \"./styles\";\n\n// UI\nimport Logo from \"components/Logo\";\n\n// Utils\nimport { getRoutesByRole } from \"../../utils/routerUtils\";\n\n// Hooks\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nconst NavigationPanel = ({ me }) => {\n    const classes = useStyles();\n\n    const routes = getRoutesByRole(get(me, \"role\"));\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Logo />\n\n                <Typography variant=\"h6\" className={classes.title} />\n\n                {me ? (\n                    <Avatar>\n                        {get(me, \"firstname[0]\", \"\") +\n                            get(me, \"lastname[0]\", \"\")}\n                    </Avatar>\n                ) : (\n                    <Button>\n                        <StyledLink to=\"/signin\">Login</StyledLink>\n                    </Button>\n                )}\n                <NavigationMenu menuItems={routes} />\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default NavigationPanel;\n","import styled from \"styled-components\";\nimport { TableRow } from \"@material-ui/core\";\n\nexport const StyledTableRow = styled(TableRow)`\n    cursor: ${props => (props.hover ? \"pointer\" : \"auto\")};\n`;\n","import React from \"react\";\nimport { StyledTableRow } from \"./styles\";\n\nfunction TableRow(props) {\n    return <StyledTableRow {...props} />;\n}\n\nexport default TableRow;\n","export const TABLE_HEADERS = [\n    \"id\",\n    \"Name\",\n    \"Skills\",\n    \"Project name\",\n    \"Total work time\",\n];\n\nexport const DEFAULT_FORM_VALUES = {\n    firstname: \"\",\n    lastname: \"\",\n    skills: [],\n    email: \"\",\n    role: \"\",\n    rate: 0,\n    country: \"\",\n};\n","// Core\nimport React from \"react\";\n\n// UI\nimport {\n    TableContainer,\n    TableHead,\n    TableCell,\n    TableBody,\n    Paper,\n    Table,\n} from \"@material-ui/core\";\nimport TableRow from \"components/TableRow\";\n\n// Constants\nimport { TABLE_HEADERS } from \"constants/developers\";\n\nexport default function ({ developerList, setEditingUserData }) {\n    const getFullName = (firstname, lastname) => `${firstname} ${lastname}`;\n    const concatSkills = skillsArray => skillsArray.join(\", \");\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        {TABLE_HEADERS.map(item => (\n                            <TableCell key={item}>{item}</TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {developerList.length ? (\n                        developerList.map(developer => (\n                            <TableRow\n                                hover\n                                key={developer.id}\n                                onClick={() => setEditingUserData(developer)}\n                            >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {developer.id}\n                                </TableCell>\n                                <TableCell>\n                                    {getFullName(\n                                        developer.firstname,\n                                        developer.lastname\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    {concatSkills(developer.skills)}\n                                </TableCell>\n                                <TableCell>{developer.projects}</TableCell>\n                                <TableCell>{developer.total}</TableCell>\n                            </TableRow>\n                        ))\n                    ) : (\n                        <TableRow>\n                            <TableCell>{\"Empty\"}</TableCell>\n                        </TableRow>\n                    )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","import styled from \"styled-components\";\nimport { Dialog } from \"@material-ui/core\";\n\nexport const StyledDialog = styled(Dialog)`\n    & .MuiPaper-root,\n    .MuiDialogContent-root {\n        overflow-y: visible;\n    }\n    & .MuiPaper-root {\n        max-width: 600px;\n    }\n`;\n","// Core\nimport React from \"react\";\n\n// UI\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\n// Styles\nimport { StyledDialog } from \"./styles\";\n\nexport default function FormDialog({ open, handleClose, title, children }) {\n    return (\n        <StyledDialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n            maxWidth={\"lg\"}\n        >\n            <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\n            <DialogContent>{children}</DialogContent>\n        </StyledDialog>\n    );\n}\n","// Core\nimport React from \"react\";\n//UI\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst EMPTY_OPTIONS = [];\n\nexport default function SkillMultiSelect({ onChange, values, id }) {\n    const handleChange = (e, newValue) => {\n        if (typeof newValue === \"string\") {\n            onChange(id, [...values, newValue]);\n        } else if (newValue && newValue.inputValue) {\n            onChange([...values.newValue.inputValue]);\n        }\n        onChange(id, newValue);\n    };\n\n    return (\n        <>\n            <Autocomplete\n                multiple\n                id={id}\n                options={EMPTY_OPTIONS}\n                freeSolo\n                value={values}\n                // filterSelectedOptions\n                onChange={handleChange}\n                renderInput={params => (\n                    <TextField {...params} variant=\"outlined\" label=\"Skills\" />\n                )}\n            />\n        </>\n    );\n}\n","import { TextField } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default function RateInput({ onChange, value, id }) {\n    const handleChange = e => {\n        if (Number(e.target.value) < 0) {\n            onChange(id, 0);\n            return;\n        }\n        onChange(id, e.target.value);\n    };\n\n    return (\n        <TextField\n            label=\"Rate\"\n            type=\"number\"\n            onChange={handleChange}\n            value={value}\n        />\n    );\n}\n","import styled from \"styled-components\";\nimport { Grid } from \"@material-ui/core\";\n\nexport const StyledGridContainer = styled(Grid)`\n    & .MuiGrid-root {\n        margin-bottom: 1em;\n    }\n`;\n","// Core\nimport React from \"react\";\n\n// UI\nimport { RadioGroup, FormControlLabel, Radio, Grid } from \"@material-ui/core\";\n\nfunction RoleSelector({ value, onChange, id }) {\n    const handleChange = e => {\n        onChange(id, e.target.value);\n    };\n    return (\n        <RadioGroup aria-label=\"Type\" value={value} onChange={handleChange}>\n            <Grid container wrap=\"nowrap\">\n                <FormControlLabel\n                    value=\"dev\"\n                    id={id}\n                    control={<Radio color={\"primary\"} />}\n                    label=\"Developer\"\n                />\n                <FormControlLabel\n                    value=\"admin\"\n                    id={id}\n                    control={<Radio color={\"primary\"} />}\n                    label=\"Admin\"\n                />\n            </Grid>\n        </RadioGroup>\n    );\n}\n\nexport default RoleSelector;\n","// Core\nimport React from \"react\";\nimport { useFormik } from \"formik\";\n// UI\nimport { Grid, TextField } from \"@material-ui/core\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport FormDialog from \"components/FormDialog\";\nimport SkillMultiSelect from \"../SkillsSelector\";\nimport RateInput from \"../RateInput\";\n// Styles\nimport { StyledGridContainer } from \"./styles\";\n// Utils\nimport { getInitialFormValues } from \"utils/developersUtils\";\nimport RoleSelector from \"../RoleSelector\";\n\nexport default function CreateUserForm({\n    open,\n    onClose,\n    handleSubmit,\n    initialData,\n    handleDeleteUser,\n}) {\n    const initialValues = getInitialFormValues(initialData);\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: async data => {\n            await handleSubmit(data, initialData?.id);\n            onClose();\n        },\n    });\n\n    return (\n        <FormDialog open={open} handleClose={onClose} title=\"Project Item:\">\n            <form autoComplete=\"off\">\n                <StyledGridContainer>\n                    <Grid container>\n                        <Grid item xs>\n                            <TextField\n                                id=\"firstname\"\n                                label=\"First name\"\n                                onChange={formik.handleChange}\n                                defaultValue={formik.values.firstname}\n                                autoComplete=\"off\"\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id=\"lastname\"\n                                label=\"Last name\"\n                                onChange={formik.handleChange}\n                                defaultValue={formik.values.lastname}\n                                autoComplete=\"off\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <SkillMultiSelect\n                            values={formik.values.skills}\n                            onChange={formik.setFieldValue}\n                            id=\"skills\"\n                        />\n                    </Grid>\n                    <Grid container justify={\"space-between\"}>\n                        <Grid item xs={8}>\n                            <TextField\n                                id=\"country\"\n                                label=\"Country\"\n                                onChange={formik.handleChange}\n                                defaultValue={formik.values.country}\n                            />\n                        </Grid>\n                        <Grid item xs={2}>\n                            <RateInput\n                                onChange={formik.setFieldValue}\n                                id=\"rate\"\n                                value={formik.values.rate}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs>\n                        <TextField\n                            id=\"email\"\n                            label=\"e-mail\"\n                            onChange={formik.handleChange}\n                            defaultValue={formik.values.email}\n                        />\n                    </Grid>\n                    <Grid container justify=\"flex-end\">\n                        <RoleSelector\n                            value={formik.values.role}\n                            onChange={formik.setFieldValue}\n                            id=\"role\"\n                        />\n                    </Grid>\n                    <DialogActions>\n                        {initialData && (\n                            <Button\n                                onClick={() =>\n                                    handleDeleteUser(initialData?.id)\n                                }\n                                color=\"secondary\"\n                            >\n                                Delete\n                            </Button>\n                        )}\n                        <Button onClick={onClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={formik.handleSubmit} color=\"primary\">\n                            Save\n                        </Button>\n                    </DialogActions>\n                </StyledGridContainer>\n            </form>\n        </FormDialog>\n    );\n}\n","import { DEFAULT_FORM_VALUES } from \"constants/developers\";\n\nexport const getInitialFormValues = initialData => {\n    if (!initialData) {\n        return {\n            ...DEFAULT_FORM_VALUES,\n        };\n    }\n    return Object.keys(DEFAULT_FORM_VALUES).reduce((acc, key) => {\n        acc[key] = initialData[key];\n        return acc;\n    }, {});\n};\n","import styled from \"styled-components\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\n\nexport const StyledAddCircleOutlineIcon = styled(AddCircleOutlineIcon)`\n    ${({ theme }) => `\n    margin: ${theme.spacing(2)}px 0;\n    font-size: 40px;\n    cursor: pointer;\n`}\n`;\n","// Core\nimport React from \"react\";\n\n// UI\nimport { Button } from \"@material-ui/core\";\n\n// Styles\nimport { StyledAddCircleOutlineIcon } from \"./styles\";\n\nfunction AddButton({ handleClick, children }) {\n    return (\n        <Button\n            color=\"primary\"\n            onClick={handleClick}\n            startIcon={<StyledAddCircleOutlineIcon />}\n        >\n            {children}\n        </Button>\n    );\n}\n\nexport default AddButton;\n","export const API_URL = window.API_URL\n","// Core\nimport axios from \"axios\";\n\n// Constants\nimport { API_URL } from \"./constants\";\n\nclass AuthService {\n    login = async data => {\n        return axios.post(`${API_URL}/auth/login`, {\n            ...data,\n        });\n    };\n\n    getMe = async () => axios.get(`${API_URL}/me`);\n\n    addAuthHeaderInterceptor = async ({ token, onError }) => {\n        axios.interceptors.request.use(\n            config => {\n                if (token) {\n                    config.headers[\"Authorization\"] = \"Bearer \" + token;\n                }\n                // config.headers['Content-Type'] = 'application/json';\n                return config;\n            },\n            error => {\n                if (error.response.status === 401) {\n                    onError();\n                }\n                Promise.reject(error);\n            }\n        );\n    };\n}\n\nconst authService = new AuthService();\n\nexport default authService;\n","// Core\nimport { observable, action, decorate } from \"mobx\";\nimport get from \"lodash.get\";\nimport axios from \"axios\";\n\n// Services\nimport authService from \"../services/api/AuthService\";\n\nclass AuthStore {\n    me = undefined;\n    token = undefined;\n\n    setInitialState = () => {\n        this.token = undefined;\n        this.me = undefined;\n    };\n\n    onLogin = async data => {\n        try {\n            const response = await authService.login(data);\n\n            const token = get(response, \"data.access_token\");\n\n            if (token) {\n                await localStorage.setItem(\"token\", token);\n                this.setUserToken(token);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    onGetMe = async () => {\n        const response = await authService.getMe();\n\n        return response.data;\n    };\n\n    dispatchLoginFulfilled = (me, token) => {\n        this.me = me;\n        this.token = token;\n    };\n\n    setUserToken = token => {\n        this.token = token;\n    };\n\n    addAuthHeaderInterceptor = async () => {\n        const token = await localStorage.getItem(\"token\");\n\n        axios.interceptors.request.use(\n            config => {\n                if (token) {\n                    config.headers[\"Authorization\"] = \"Bearer \" + token;\n                }\n                // config.headers['Content-Type'] = 'application/json';\n                return config;\n            },\n            error => {\n                if (error.response.status === 401) {\n                    this.setInitialState();\n                }\n                Promise.reject(error);\n            }\n        );\n    };\n}\n\ndecorate(AuthStore, {\n    // state\n    me: observable.ref,\n    token: observable,\n\n    //actions\n    setInitialState: action,\n    onLogin: action,\n    dispatchLoginFulfilled: action,\n    setUserToken: action,\n    addAuthHeaderInterceptor: action,\n    onGetMe: action,\n});\n\nconst authStore = new AuthStore();\n\nexport default authStore;\n","// Core\nimport axios from \"axios\";\n\n// Constants\nimport { API_URL } from \"./constants\";\n\nclass LogService {\n    getLogs = params => axios.get(`${API_URL}/log`, { params });\n    addLog = params => axios.post(`${API_URL}/log`, { ...params });\n    updateLog = (params, pathId) =>\n        axios.put(`${API_URL}/log/${pathId}`, { ...params });\n    deleteLog = id => axios.delete(`${API_URL}/log/${id}`);\n}\n\nconst logService = new LogService();\n\nexport default logService;\n","// Core\nimport { observable, action, decorate } from \"mobx\";\nimport logService from \"../services/api/LogService\";\nimport get from \"lodash.get\";\nclass LogStore {\n    logs = [];\n\n    onGetLogs = async params => {\n        try {\n            const response = await logService.getLogs(params);\n            this.logs = get(response, \"data.data\");\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    onAddLog = async params => {\n        try {\n            await logService.addLog(params);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    onUpdateLog = async (params, pathId) => {\n        try {\n            await logService.updateLog(params, pathId);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    onDeleteLog = async id => {\n        try {\n            await logService.deleteLog(id);\n            this.onGetLogs();\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    set logs(logs) {\n        this.logs = logs;\n    }\n}\n\ndecorate(LogStore, {\n    // state\n    logs: observable.ref,\n\n    // actions\n    onGetLogs: action,\n    onAddLog: action,\n    onUpdateLog: action,\n    onDeleteLog: action,\n});\n\nconst logStore = new LogStore();\n\nexport default logStore;\n","// Core\nimport axios from \"axios\";\n\n// Constants\nimport { API_URL } from \"./constants\";\n\nclass LogTypesService {\n    getLogTypes = config => axios.get(`${API_URL}/log-type`, { ...config });\n}\n\nconst logTypesService = new LogTypesService();\n\nexport default logTypesService;\n","// Core\nimport { observable, action, decorate } from \"mobx\";\nimport logTypesService from \"../services/api/LogTypesService\";\n\nclass LogTypesStore {\n    logTypes = [];\n\n    onGetLogTypes = async config => {\n        try {\n            const { data } = await logTypesService.getLogTypes(config);\n            this.setLogTypes(data);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    setLogTypes = ({ data }) => {\n        this.logTypes = data;\n    };\n}\n\ndecorate(LogTypesStore, {\n    // state\n    logTypes: observable.ref,\n\n    // actions\n    setLogTypes: action.bound,\n    onGetLogTypes: action,\n});\n\nconst logTypesStore = new LogTypesStore();\n\nexport default logTypesStore;\n","// Core\nimport { observable, action, decorate } from \"mobx\";\n\nclass LoadersStore {\n    isLoadingPage = true;\n\n    setLoadingPage = status => {\n        this.isLoadingPage = status;\n    };\n}\n\ndecorate(LoadersStore, {\n    // state\n    isLoadingPage: observable,\n\n    // actions\n    setLoadingPage: action,\n});\n\nconst loadersStore = new LoadersStore();\n\nexport default loadersStore;\n","// Core\nimport axios from \"axios\";\n\n// Constants\nimport { API_URL } from \"./constants\";\n\nclass ProjectService {\n    getProjectList = () => axios.get(`${API_URL}/project`);\n    getProjectTypes = () => axios.get(`${API_URL}/project/types`);\n    getProjectUserList = id => axios.get(`${API_URL}/project/${id}/users`);\n    createProject = body => axios.post(`${API_URL}/project`, { ...body });\n    updateProject = (body, id) =>\n        axios.put(`${API_URL}/project/${id}`, { ...body });\n    deleteProject = id => axios.delete(`${API_URL}/project/${id}`);\n}\n\nconst projectService = new ProjectService();\n\nexport default projectService;\n","// Core\nimport { observable, action, decorate, runInAction } from \"mobx\";\nimport get from \"lodash.get\";\n// Services\nimport projectService from \"../services/api/ProjectService\";\n\nconst fetchStrategy = ({ body, id }) => ({\n    delete: () => projectService.deleteProject(id),\n    update: () => projectService.updateProject(body, id),\n    create: () => projectService.createProject(body),\n});\nclass ProjectStore {\n    projectList = [];\n    projectTypes = [];\n    projectUserList = [];\n    editingProjectData = undefined;\n\n    setInitialState = () => {\n        this.projectList = [];\n        this.projectTypes = [];\n    };\n\n    onGetProjectList = async () => {\n        try {\n            const data = await projectService.getProjectList();\n            this.projectList = get(data, \"data.data\");\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    handleFetchProjectData = async (actionType, data) => {\n        try {\n            await fetchStrategy(data)[actionType]();\n            this.onGetProjectList();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    onCreateProject = body => {\n        this.handleFetchProjectData(\"create\", { body });\n    };\n\n    onUpdateProject = (body, id) => {\n        this.handleFetchProjectData(\"update\", { body, id });\n    };\n\n    onDeleteProject = id => {\n        this.handleFetchProjectData(\"delete\", { id });\n    };\n\n    onGetProjectTypes = async () => {\n        try {\n            const data = await projectService.getProjectTypes();\n            this.projectTypes = get(data, \"data.data\");\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    onGetProjectUserList = async id => {\n        try {\n            const data = await projectService.getProjectUserList(id);\n            return get(data, \"data.data\");\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    setEditingProjectData = async project => {\n        if (!project) {\n            runInAction(() => {\n                this.editingProjectData = project;\n            });\n            return;\n        }\n        const users = await this.onGetProjectUserList(project.id);\n        runInAction(() => {\n            this.editingProjectData = {\n                ...project,\n                users: users.map(item => item.id),\n            };\n        });\n    };\n\n    set projectList(data) {\n        this.projectList = data;\n    }\n    s;\n    set projectTypes(data) {\n        this.projectTypes = data;\n    }\n    set projectUserList(data) {\n        this.projectUserList = data;\n    }\n}\n\ndecorate(ProjectStore, {\n    // state\n    projectList: observable,\n    projectTypes: observable,\n    projectUserList: observable,\n    editingProjectData: observable,\n\n    //actions\n    setInitialState: action,\n    onGetProjectList: action.bound,\n    onGetProjectTypes: action,\n    setEditingProjectData: action,\n    onCreateProject: action,\n    onUpdateProject: action,\n    onDeleteProject: action,\n});\n\nconst projectStore = new ProjectStore();\n\nexport default projectStore;\n","// Core\nimport axios from \"axios\";\n\n// Constants\nimport { API_URL } from \"./constants\";\n\nclass UserService {\n    getUserList = () => axios.get(`${API_URL}/user`);\n    getMe = () => axios.get(`${API_URL}/me`);\n    getUser = id => axios.get(`${API_URL}/user/${id}`);\n    createUser = body => axios.post(`${API_URL}/user`, { ...body });\n    updateUser = (body, pathId) =>\n        axios.put(`${API_URL}/user/${pathId}`, { ...body });\n    deleteUser = id => axios.delete(`${API_URL}/user/${id}`);\n}\n\nconst userService = new UserService();\n\nexport default userService;\n","// Core\nimport { observable, action, decorate } from \"mobx\";\nimport userService from \"../services/api/UserService\";\nimport get from \"lodash.get\";\n\nconst fetchStrategy = ({ body, id }) => ({\n    delete: () => userService.deleteUser(id),\n    update: () => userService.updateUser(body, id),\n    create: () => userService.createUser(body),\n});\nclass UserStore {\n    userList = [];\n    editingUserData = undefined;\n\n    onGetUserList = async () => {\n        try {\n            const response = await userService.getUserList();\n            this.userList = get(response, \"data.data\");\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    handleFetchUserData = async (actionType, data) => {\n        try {\n            await fetchStrategy(data)[actionType]();\n            this.onGetUserList();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    onCreateUser = body => {\n        this.handleFetchUserData(\"create\", { body });\n    };\n\n    onUpdateUser = (body, id) => {\n        this.handleFetchUserData(\"update\", { body, id });\n    };\n\n    onDeleteUser = id => {\n        this.handleFetchUserData(\"delete\", { id });\n    };\n\n    set userList(userList) {\n        this.userList = userList;\n    }\n\n    setEditingUserData = user => {\n        this.editingUserData = user;\n    };\n}\n\ndecorate(UserStore, {\n    // state\n    userList: observable,\n    editingUserData: observable,\n\n    // actions\n    setEditingUserData: action,\n    onGetUserList: action,\n    onCreateUser: action,\n    onUpdateUser: action,\n    onDeleteUser: action,\n});\n\nconst userStore = new UserStore();\n\nexport default userStore;\n","// Core\nimport React from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\n// Stores\nimport authStore from \"./AuthStore\";\nimport logStore from \"./LogStore\";\nimport logTypesStore from \"./LogTypesStore\";\nimport loadersStore from \"./LoadersStore\";\nimport projectStore from \"./ProjectStore\";\nimport userStore from \"./UserStore\";\n\n// Hook\nexport const useStores = () => {\n    return React.useContext(MobXProviderContext);\n};\n\nconst stores = {\n    authStore,\n    logStore,\n    logTypesStore,\n    loadersStore,\n    projectStore,\n    userStore,\n};\n\nexport default stores;\n","import styled from \"styled-components\";\nimport { Grid } from \"@material-ui/core\";\n\nexport const StyledGrid = styled(Grid)`\n    ${({ theme }) => `\n    margin-top: ${theme.spacing(4)}px;\n    margin-bottom: ${theme.spacing(2)}px;\n`}\n`;\n","export const TABLE_HEADERS = [\n    \"id\",\n    \"Number of developers\",\n    \"Project name\",\n    \"Type\",\n    \"Total time spend\",\n];\n\nexport const DEFAULT_FORM_VALUES = {\n    alias: \"\",\n    name: \"\",\n    descriptions: \"\",\n    users: [],\n    type: \"\",\n};\n","// Core\nimport React from \"react\";\n\n// UI\nimport {\n    TableContainer,\n    TableHead,\n    TableCell,\n    TableBody,\n    Paper,\n    Table,\n} from \"@material-ui/core\";\nimport TableRow from \"components/TableRow\";\n\n// Constants\nimport { TABLE_HEADERS } from \"constants/projects\";\n\nexport default function ({ projectList, setEditingProjectData }) {\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        {TABLE_HEADERS.map(item => (\n                            <TableCell key={item}>{item}</TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {projectList.length ? (\n                        projectList.map(project => (\n                            <TableRow\n                                hover\n                                key={project.id}\n                                onClick={() => setEditingProjectData(project)}\n                            >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {project.id}\n                                </TableCell>\n                                <TableCell>{project.num_of_dev}</TableCell>\n                                <TableCell>{project.name}</TableCell>\n                                <TableCell>{project.type}</TableCell>\n                                <TableCell>{project.total_log}</TableCell>\n                            </TableRow>\n                        ))\n                    ) : (\n                        <TableRow>\n                            <TableCell>{\"Empty\"}</TableCell>\n                        </TableRow>\n                    )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","// Core\nimport React from \"react\";\n//UI\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport default function UserMultiSelect({ userList, onChange, values, id }) {\n    const getOptionLabel = option => `${option.firstname} ${option.lastname}`;\n\n    const handleChange = (e, data) => {\n        onChange(\n            id,\n            data.map(item => item.id)\n        );\n    };\n\n    const getSelectedOptions = () => {\n        const idSet = new Set(values);\n        return userList.filter(item => idSet.has(item.id));\n    };\n\n    return (\n        <>\n            <Autocomplete\n                multiple\n                id={id}\n                options={userList}\n                getOptionLabel={getOptionLabel}\n                value={getSelectedOptions()}\n                filterSelectedOptions\n                onChange={handleChange}\n                renderInput={params => (\n                    <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label=\"Select developers\"\n                    />\n                )}\n            />\n        </>\n    );\n}\n","// Core\nimport React from \"react\";\n\n// UI\nimport { RadioGroup, FormControlLabel, Radio, Grid } from \"@material-ui/core\";\n\nfunction TypeSelector({ value, projectTypes, onChange }) {\n    return (\n        <RadioGroup\n            aria-label=\"Type\"\n            name=\"type\"\n            value={value}\n            onChange={onChange}\n        >\n            <Grid container wrap=\"nowrap\">\n                {projectTypes.map(item => (\n                    <FormControlLabel\n                        key={`project-type-${item}`}\n                        value={item}\n                        control={<Radio color={\"primary\"} />}\n                        label={item}\n                    />\n                ))}\n            </Grid>\n        </RadioGroup>\n    );\n}\n\nexport default TypeSelector;\n","import styled from \"styled-components\";\nimport { Grid } from \"@material-ui/core\";\n\nexport const StyledGridContainer = styled(Grid)`\n    & .MuiGrid-root {\n        margin-bottom: 1em;\n    }\n`;\n","// Core\nimport React from \"react\";\nimport { useFormik } from \"formik\";\n\n// UI\nimport { TextField, Grid } from \"@material-ui/core\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport FormDialog from \"components/FormDialog\";\nimport UserMultiSelect from \"../UserMultiSelect\";\nimport TypeSelector from \"../TypeSelector\";\n\n// Styles\nimport { StyledGridContainer } from \"./styles\";\n\n// Utils\nimport { getInitialFormValues } from \"utils/projectUtils\";\n\n// Constants\n\nexport default function LogForm({\n    open,\n    onClose,\n    userList,\n    projectTypes,\n    handleSubmit,\n    initialData,\n    handleDeleteProject,\n}) {\n    const initialValues = getInitialFormValues(initialData);\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: async data => {\n            await handleSubmit(data, initialData?.id);\n            onClose();\n        },\n    });\n\n    return (\n        <FormDialog open={open} handleClose={onClose} title=\"Project Item:\">\n            <StyledGridContainer>\n                <Grid container>\n                    <Grid item>\n                        <TextField\n                            required\n                            id=\"name\"\n                            label=\"Project name\"\n                            onChange={formik.handleChange}\n                            defaultValue={formik.values.name}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            required\n                            id=\"alias\"\n                            label=\"Alias\"\n                            onChange={formik.handleChange}\n                            defaultValue={formik.values.name}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs>\n                    <TextField\n                        id=\"descriptions\"\n                        defaultValue={formik.values.descriptions}\n                        onChange={formik.handleChange}\n                        label=\"Description\"\n                        multiline\n                        fullWidth\n                        rows={4}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <UserMultiSelect\n                        onChange={formik.setFieldValue}\n                        values={formik.values.users}\n                        userList={userList}\n                        id={\"users\"}\n                    />\n                </Grid>\n                <Grid container justify=\"flex-end\">\n                    <TypeSelector\n                        value={formik.values.type}\n                        projectTypes={projectTypes}\n                        onChange={formik.handleChange}\n                    />\n                </Grid>\n                <DialogActions>\n                    {initialData && (\n                        <Button\n                            onClick={() => handleDeleteProject(initialData?.id)}\n                            color=\"secondary\"\n                        >\n                            Delete\n                        </Button>\n                    )}\n                    <Button onClick={onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={formik.handleSubmit} color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </StyledGridContainer>\n        </FormDialog>\n    );\n}\n","import { DEFAULT_FORM_VALUES } from \"constants/projects\";\n\nexport const getInitialFormValues = initialData => {\n    if (!initialData) {\n        return {\n            ...DEFAULT_FORM_VALUES,\n        };\n    }\n    return Object.keys(DEFAULT_FORM_VALUES).reduce((acc, key) => {\n        acc[key] = initialData[key];\n        return acc;\n    }, {});\n};\n","import styled from \"styled-components\";\nimport { Grid } from \"@material-ui/core\";\n\nexport const StyledGrid = styled(Grid)`\n    ${({ theme }) => `\n    margin-top: ${theme.spacing(4)}px;\n    margin-bottom: ${theme.spacing(2)}px;\n`}\n`;\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nfunction getWeeksOptions(weeksCount) {\n    return Array.from({ length: weeksCount }).map((_, index) =>\n        String(index + 1)\n    );\n}\n\nexport default function ({ setWeek, selectedWeek }) {\n    const currentWeek = moment().week();\n\n    const [weeksOptions] = useState(getWeeksOptions(currentWeek));\n\n    const changeWeek = (e, value) => {\n        setWeek(value);\n    };\n\n    const value = selectedWeek && String(selectedWeek);\n\n    return (\n        <Autocomplete\n            value={value}\n            options={weeksOptions}\n            onChange={changeWeek}\n            renderInput={params => (\n                <TextField {...params} label=\"Week number\" />\n            )}\n        />\n    );\n}\n","// Core\nimport React, { useEffect, useState } from \"react\";\nimport moment from \"moment\";\n\n// UI\nimport { Button, ButtonGroup } from \"@material-ui/core\";\nimport {\n    DATE_FORMAT,\n    DAY_FORMAT,\n    FULL_DATE_FORMAT,\n} from \"constants/dateFormats\";\n\nfunction checkLogDate(logs, date) {\n    return logs.some(\n        item =>\n            moment(item.date, FULL_DATE_FORMAT).format(DATE_FORMAT) ===\n            moment(date).format(DATE_FORMAT)\n    );\n}\n\nexport default function ({ selectedWeek, logs, setDay, selectedDay }) {\n    const [weekDates, setWeekDates] = useState([]);\n\n    useEffect(() => {\n        if (!selectedWeek) {\n            setWeekDates([]);\n            return;\n        }\n        const getWeekDates = weekNumber => {\n            return Array.from({ length: 7 }).map((_, index) =>\n                moment()\n                    .week(weekNumber)\n                    .weekday(index + 1)\n            );\n        };\n\n        setWeekDates(getWeekDates(selectedWeek));\n    }, [selectedWeek]);\n\n    const formatDate = day => moment(day).format(DAY_FORMAT);\n    const isActive = day => day === selectedDay;\n    return (\n        <ButtonGroup color=\"primary\" variant=\"text\" size=\"large\">\n            {weekDates.map(day => {\n                const hasLogs = checkLogDate(logs, day);\n                return (\n                    <Button\n                        onClick={() => setDay(day)}\n                        size=\"large\"\n                        color={\n                            isActive(day)\n                                ? \"secondary\"\n                                : hasLogs\n                                ? \"primary\"\n                                : \"default\"\n                        }\n                        variant=\"contained\"\n                        key={`date-${day}`}\n                    >\n                        {formatDate(day)}\n                    </Button>\n                );\n            })}\n        </ButtonGroup>\n    );\n}\n","export const FULL_DATE_FORMAT = \"DD-MM-YYYY\";\nexport const FULL_DATE_SHORT = \"DD-MM-YY\";\n\nexport const DATE_FORMAT = \"DD.MM\";\nexport const DAY_FORMAT = \"DD\";\nexport const TIME_FORMAT = \"HH:mm\";\n\nexport const HOUR_IN_MINUTES = 60;\n\nexport const MONDAY = 1;\nexport const SUNDAY = 7;\n","export const TABLE_HEADERS = [\n    \"Work Item\",\n    \"Date\",\n    \"Project Name\",\n    \"Type\",\n    \"Work Time\",\n    \"Status\",\n];\n\nexport const validationErrorMessages = {\n    timeInterval: \"Time interval is invalid\",\n};\n","// Core\nimport React from \"react\";\nimport moment from \"moment\";\n\n// UI\nimport {\n    TableContainer,\n    TableHead,\n    TableCell,\n    TableBody,\n    Paper,\n    Table,\n} from \"@material-ui/core\";\nimport TableRow from \"components/TableRow\";\n\n// Constants\nimport { TABLE_HEADERS } from \"constants/developerReport\";\nimport {\n    HOUR_IN_MINUTES,\n    DATE_FORMAT,\n    FULL_DATE_SHORT,\n    FULL_DATE_FORMAT,\n} from \"constants/dateFormats\";\n\nfunction getTimeLabel(time) {\n    let result = `${time} hours`;\n    const durationMin = moment.duration(time).asMinutes();\n    if (durationMin < HOUR_IN_MINUTES) {\n        result = `${durationMin} minutes`;\n    }\n    return result;\n}\n\nexport default function ({\n    data,\n    handleEditLog,\n    selectedDay,\n    selectedWeek,\n    projects,\n    logTypes,\n}) {\n    const [filteredLogs, setFilteredLogs] = React.useState([]);\n\n    React.useEffect(() => {\n        let logs = data;\n        if (selectedDay) {\n            logs = data.filter(\n                item =>\n                    moment(item.date, FULL_DATE_FORMAT).format(DATE_FORMAT) ===\n                    moment(selectedDay).format(DATE_FORMAT)\n            );\n        }\n        if (!selectedWeek) {\n            logs = [];\n        }\n        setFilteredLogs(logs);\n    }, [data, selectedDay, selectedWeek]);\n\n    const editLog = log => {\n        handleEditLog(log);\n    };\n\n    const getProjectName = id => projects.find(item => item.id === id)?.name;\n    const getLogTypeEnum = id => logTypes.find(item => item.id === id)?.type;\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        {TABLE_HEADERS.map(item => (\n                            <TableCell key={item}>{item}</TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {filteredLogs.length ? (\n                        filteredLogs.map((log, i) => (\n                            <TableRow\n                                hover\n                                key={log.id}\n                                onClick={() => editLog(log)}\n                            >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {i + 1}\n                                </TableCell>\n                                <TableCell>\n                                    {moment(log.date, FULL_DATE_FORMAT).format(\n                                        FULL_DATE_SHORT\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    {getProjectName(log.project_id)}\n                                </TableCell>\n                                <TableCell>\n                                    {getLogTypeEnum(log.log_type_id)}\n                                </TableCell>\n                                <TableCell>{getTimeLabel(log.total)}</TableCell>\n                                <TableCell>{log.status}</TableCell>\n                            </TableRow>\n                        ))\n                    ) : (\n                        <TableRow>\n                            <TableCell>{\"You don't have any logs\"}</TableCell>\n                        </TableRow>\n                    )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","// Core\nimport React from \"react\";\nimport moment from \"moment\";\nimport MomentUtils from \"@date-io/moment\";\n// UI\nimport {\n    KeyboardTimePicker,\n    MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\n// Constants\nimport { TIME_FORMAT } from \"constants/dateFormats\";\n\nexport default function Developers({ value, id, label, onChange, error }) {\n    const handleChange = momentTime => {\n        onChange(id, momentTime);\n    };\n\n    return (\n        <>\n            <MuiPickersUtilsProvider utils={MomentUtils}>\n                <KeyboardTimePicker\n                    ampm={false}\n                    id={id}\n                    error={!!error}\n                    label={label}\n                    value={moment(value, TIME_FORMAT)}\n                    onChange={handleChange}\n                    helperText={error}\n                />\n            </MuiPickersUtilsProvider>\n        </>\n    );\n}\n","import styled from \"styled-components\";\nimport { FormControl } from \"@material-ui/core\";\n\nexport const StyledFormControl = styled(FormControl)`\n    min-width: 120px;\n`;\n","// Core\nimport React from \"react\";\n\n// UI\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\n// Styles\nimport { StyledFormControl } from \"./styles\";\n\nfunction createOptions(data, opts) {\n    return data.map(item => ({\n        value: item[opts.value],\n        label: item[opts.label],\n    }));\n}\n\nexport default function Selector({\n    onChange,\n    data,\n    name,\n    id,\n    value,\n    labelKey,\n    valueKey,\n    placeholder,\n}) {\n    const [options] = React.useState(\n        createOptions(data, { label: labelKey, value: valueKey })\n    );\n\n    const handleChange = e => {\n        onChange(id, e.target.value);\n    };\n\n    return (\n        <StyledFormControl>\n            <InputLabel>{placeholder}</InputLabel>\n            <Select value={value || \"\"} onChange={handleChange}>\n                {options.map(item => (\n                    <MenuItem key={`${id}-${item.value}`} value={item.value}>\n                        {item.label}\n                    </MenuItem>\n                ))}\n            </Select>\n        </StyledFormControl>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => {\n    return {\n        root: {\n            \"& .MuiGrid-root\": {\n                marginBottom: theme.spacing(2),\n            },\n            \"& .MuiFormLabel-root\": {\n                zIndex: 0,\n            },\n        },\n    };\n});\n\nexport default useStyles;\n","import moment from \"moment\";\nimport {\n    FULL_DATE_FORMAT,\n    TIME_FORMAT,\n    MONDAY,\n    SUNDAY,\n} from \"constants/dateFormats\";\n\nexport const getInitialFormValues = initialData => ({\n    date: initialData\n        ? moment(initialData.date, FULL_DATE_FORMAT).format(FULL_DATE_FORMAT)\n        : \"\",\n    descriptions: initialData ? initialData.descriptions : \"\",\n    from_time: initialData\n        ? moment(initialData[\"from_time\"], TIME_FORMAT).format(TIME_FORMAT)\n        : moment(\"00:00\", TIME_FORMAT).format(TIME_FORMAT),\n    to_time: initialData\n        ? moment(initialData[\"to_time\"], TIME_FORMAT).format(TIME_FORMAT)\n        : moment(\"00:01\", TIME_FORMAT).format(TIME_FORMAT),\n    project_id: initialData ? initialData[\"project_id\"] : 0,\n    log_type_id: initialData ? initialData[\"log_type_id\"] : 0,\n});\n\nexport const getTotalTime = durations => {\n    if (!durations.length) return \"\";\n    const totalDurations = durations\n        .slice(1)\n        .reduce(\n            (prev, cur) => moment.duration(cur.total).add(prev),\n            moment.duration(durations[0].total)\n        );\n\n    return moment.utc(totalDurations.asMilliseconds()).format(TIME_FORMAT);\n};\n\nexport const getParametersForLogs = selectedWeek => ({\n    page: 1,\n    from_date: moment().week(selectedWeek).day(MONDAY).format(FULL_DATE_FORMAT),\n    to_date: moment().week(selectedWeek).day(SUNDAY).format(FULL_DATE_FORMAT),\n});\n","// Core\nimport React from \"react\";\nimport moment from \"moment\";\nimport { useFormik } from \"formik\";\n\n// UI\nimport { TextField, Typography, Grid } from \"@material-ui/core\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport TimePicker from \"components/TimePicker\";\nimport FormDialog from \"components/FormDialog\";\nimport Selector from \"../Selector\";\n\n// Styles\nimport useStyles from \"./styles\";\n\n// Utils\nimport { getInitialFormValues } from \"utils/developerReportUtils\";\n\n// Constants\nimport { validationErrorMessages } from \"constants/developerReport\";\nimport {\n    FULL_DATE_FORMAT,\n    DATE_FORMAT,\n    TIME_FORMAT,\n} from \"constants/dateFormats\";\n\nfunction validateTimeRange(from, to) {\n    return moment(from, TIME_FORMAT).isBefore(moment(to, TIME_FORMAT));\n}\n\nfunction validate(values) {\n    const errors = {};\n    if (!validateTimeRange(values.from_time, values.to_time)) {\n        errors.from_time = validationErrorMessages.timeInterval;\n        errors.to_time = validationErrorMessages.timeInterval;\n    }\n    return errors;\n}\n\nexport default function LogForm({\n    open,\n    handleClose,\n    projects,\n    logTypes,\n    submitForm,\n    initialData,\n    deleteLog,\n    selectedDay,\n}) {\n    const classes = useStyles();\n\n    const initialValues = getInitialFormValues(initialData);\n\n    if (!initialData) {\n        initialValues.date = moment(selectedDay, FULL_DATE_FORMAT).format(\n            FULL_DATE_FORMAT\n        );\n    }\n\n    const formik = useFormik({\n        initialValues,\n        enableReinitialize: true,\n        validate,\n        onSubmit: async data => {\n            await submitForm(getInitialFormValues(data), initialData?.id);\n            handleClose();\n        },\n    });\n\n    const handleDeleteLog = async () => {\n        await deleteLog(initialData.id);\n        handleClose();\n    };\n\n    const workingDay = moment(formik.values.date, FULL_DATE_FORMAT).format(\n        DATE_FORMAT\n    );\n\n    return (\n        <FormDialog open={open} handleClose={handleClose} title=\"Work Item:\">\n            <Typography variant=\"subtitle1\" gutterBottom>\n                {`Working day: ${workingDay}`}\n            </Typography>\n            <form autoComplete=\"off\">\n                <Grid container className={classes.root}>\n                    <Grid item xs={12} sm={5}>\n                        <Selector\n                            placeholder=\"Project name\"\n                            data={projects}\n                            labelKey=\"name\"\n                            valueKey=\"id\"\n                            onChange={formik.setFieldValue}\n                            id=\"project_id\"\n                            value={formik.values[\"project_id\"]}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={7}>\n                        <Grid container wrap=\"nowrap\">\n                            <TimePicker\n                                id=\"from_time\"\n                                label=\"Start time\"\n                                error={formik.errors.from_time}\n                                value={formik.values[\"from_time\"]}\n                                onChange={formik.setFieldValue}\n                            />\n                            <TimePicker\n                                margin=\"normal\"\n                                id=\"to_time\"\n                                error={formik.errors.to_time}\n                                label=\"End time\"\n                                value={formik.values[\"to_time\"]}\n                                onChange={formik.setFieldValue}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            id=\"descriptions\"\n                            fullWidth\n                            defaultValue={formik.values.descriptions}\n                            onChange={formik.handleChange}\n                            label=\"Description\"\n                            multiline\n                            rows={4}\n                            variant=\"outlined\"\n                        />\n                    </Grid>\n                    <Grid item md={4} xs={12}>\n                        <Selector\n                            data={logTypes}\n                            placeholder=\"Log type\"\n                            labelKey=\"type\"\n                            valueKey=\"id\"\n                            onChange={formik.setFieldValue}\n                            id=\"log_type_id\"\n                            value={formik.values[\"log_type_id\"]}\n                        />\n                    </Grid>\n                </Grid>\n                <DialogActions>\n                    {initialData && (\n                        <Button onClick={handleDeleteLog} color=\"secondary\">\n                            Delete\n                        </Button>\n                    )}\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={formik.handleSubmit} color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </form>\n        </FormDialog>\n    );\n}\n","// Core\nimport React from \"react\";\n\n// UI\nimport CommentOutlinedIcon from \"@material-ui/icons/CommentOutlined\";\nimport { CardHeader } from \"@material-ui/core\";\n\nexport default function NoteTitle({ children }) {\n    return <CardHeader avatar={<CommentOutlinedIcon />} title={children} />;\n}\n","import { Paper } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\nexport const StyledContainer = styled(Paper)`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 400px;\n    height: 220px;\n    padding: 20px;\n    & form {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n    }\n`;\n","// Core\nimport get from 'lodash.get'\n\nexport function authRequired({ me }) {\n    return !!me\n}\n\nexport function unauthorizedOnly(prop) {\n    return !prop.me\n}\n\nexport function roleAdmin({ me }) {\n    return get(me, 'role') === 'admin'\n}\n\nexport function roleDev({ me }) {\n    return get(me, 'role') === 'dev'\n}\n","// Pages\nimport Developers from '../Pages/developers'\nimport ManagerReports from '../Pages/manager-reports'\nimport Projects from '../Pages/projects'\nimport ReportHistory from '../Pages/report-history'\nimport DeveloperReports from '../Pages/developer-reports'\nimport SignIn from '../Pages/signin'\nimport Home from '../Pages/home'\n\n// Rules\nimport { authRequired, unauthorizedOnly, roleAdmin, roleDev } from './rules'\n\nexport default [\n    {\n        path: '/',\n        exact: true,\n        rules: [],\n        redirect: '/signin',\n        component: Home,\n    },\n    {\n        path: '/signin',\n        exact: true,\n        rules: [unauthorizedOnly],\n        redirect: '/',\n        component: SignIn,\n    },\n    // {\n    //   path: '/forgot-password',\n    //   exact: true,\n    //   rules: [],\n    //   redirect: '/',\n    //   component: ForgotPassword\n    // },\n    // {\n    //   path: '/reset-password',\n    //   exact: true,\n    //   rules: [unauthorizedOnly],\n    //   redirect: '/',\n    //   component: ResetPassword\n    // },\n    {\n        path: '/developer-reports',\n        exact: true,\n        rules: [authRequired, roleDev],\n        redirect: '/',\n        component: DeveloperReports,\n    },\n    {\n        path: '/manager-reports',\n        exact: true,\n        rules: [authRequired, roleAdmin],\n        redirect: '/',\n        component: ManagerReports,\n    },\n    {\n        path: '/projects',\n        exact: true,\n        rules: [authRequired, roleAdmin],\n        redirect: '/',\n        component: Projects,\n    },\n    {\n        path: '/developers',\n        exact: true,\n        rules: [authRequired, roleAdmin],\n        redirect: '/',\n        component: Developers,\n    },\n    {\n        path: '/report-history',\n        exact: true,\n        rules: [authRequired, roleAdmin],\n        redirect: '/',\n        component: ReportHistory,\n    },\n]\n","// Core\nimport React from 'react'\n\nexport default function Home() {\n    return <div>best time tracker ever! ! !</div>\n}\n","// Core\nimport React, { useState } from \"react\";\nimport { useObserver } from \"mobx-react\";\n\n// UI\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\n// Store\nimport { useStores } from \"../../store\";\n\n// Styles\nimport { StyledContainer } from \"./styles\";\n\nfunction useAuthData() {\n    const {\n        authStore: { onLogin },\n    } = useStores();\n    return useObserver(() => ({\n        onLogin,\n    }));\n}\n\nexport default function SignIn() {\n    const [data, setForm] = useState({ email: \"\", password: \"\" });\n    const { onLogin } = useAuthData();\n\n    return (\n        <StyledContainer>\n            <form>\n                <Grid container direction=\"column\" justify={\"center\"}>\n                    <TextField\n                        id=\"email-input\"\n                        label=\"Email\"\n                        onChange={e =>\n                            setForm({ ...data, email: e.target.value })\n                        }\n                    />\n                    <TextField\n                        id=\"password-input\"\n                        label=\"Password\"\n                        type=\"password\"\n                        onChange={e =>\n                            setForm({ ...data, password: e.target.value })\n                        }\n                    />\n                </Grid>\n                <Grid container justify={\"flex-end\"}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            onLogin(data);\n                        }}\n                    >\n                        Submit\n                    </Button>\n                </Grid>\n            </form>\n        </StyledContainer>\n    );\n}\n","// Core\nimport React, { useEffect, useState } from \"react\";\nimport { useObserver } from \"mobx-react\";\nimport moment from \"moment\";\n// UI\nimport { Container, Grid, Box } from \"@material-ui/core\";\nimport AddButton from \"components/AddButton\";\nimport WeekSelector from \"components/WeekSelector\";\nimport WeekDates from \"components/WeekDates\";\nimport ReportTable from \"Pages/developer-reports/ReportTable\";\nimport ReportForm from \"Pages/developer-reports/ReportForm\";\nimport NoteTitle from \"./NoteTitle\";\n// Utils\nimport { useStores } from \"../../store\";\n\n// Utils\nimport { getParametersForLogs, getTotalTime } from \"utils/developerReportUtils\";\n\nfunction useStore() {\n    const store = useStores();\n\n    return useObserver(() => ({\n        logs: store.logStore.logs,\n        logTypes: store.logTypesStore.logTypes,\n        projectList: store.projectStore.projectList,\n        onGetLogs: store.logStore.onGetLogs,\n        onGetLogTypes: store.logTypesStore.onGetLogTypes,\n        onGetProjectList: store.projectStore.onGetProjectList,\n        onAddLog: store.logStore.onAddLog,\n        onUpdateLog: store.logStore.onUpdateLog,\n        onDeleteLog: store.logStore.onDeleteLog,\n    }));\n}\n\nexport default function Developers() {\n    const {\n        logs,\n        logTypes,\n        projectList,\n        onGetLogs,\n        onGetProjectList,\n        onGetLogTypes,\n        onAddLog,\n        onUpdateLog,\n        onDeleteLog,\n    } = useStore();\n\n    const [selectedWeek, setWeek] = useState(moment().week());\n    const [selectedDay, setDay] = useState();\n    const [isModalVisible, setModalVisibility] = useState(false);\n    const [editingLog, setEditingLog] = useState();\n\n    useEffect(() => {\n        setDay(undefined);\n    }, [selectedWeek]);\n\n    useEffect(() => {\n        if (selectedWeek) {\n            onGetLogs(getParametersForLogs(selectedWeek));\n        }\n    }, [onGetLogs, selectedWeek]);\n\n    useEffect(() => {\n        onGetProjectList();\n        onGetLogTypes({\n            params: {\n                page: 1,\n            },\n        });\n    }, [onGetLogTypes, onGetProjectList]);\n\n    const showModal = () => {\n        setModalVisibility(true);\n    };\n\n    const closeModal = () => {\n        setModalVisibility(false);\n        setEditingLog(null);\n    };\n\n    const handleEditLog = log => {\n        setEditingLog(log);\n        showModal();\n    };\n\n    const handleSubmitForm = async (data, id) => {\n        if (editingLog) {\n            await onUpdateLog(data, id);\n            await onGetLogs(getParametersForLogs(selectedWeek));\n            return;\n        }\n        await onAddLog(data);\n        await onGetLogs(getParametersForLogs(selectedWeek));\n    };\n\n    const handleDeleteLog = async id => {\n        await onDeleteLog(id);\n        await onGetLogs(getParametersForLogs(selectedWeek));\n    };\n\n    return (\n        <Container>\n            <Grid container wrap=\"wrap\">\n                <Box width=\"10%\" m={2} minWidth={120}>\n                    <WeekSelector\n                        setWeek={setWeek}\n                        selectedWeek={selectedWeek}\n                    />\n                </Box>\n                <Box m={2}>\n                    <WeekDates\n                        selectedWeek={selectedWeek}\n                        selectedDay={selectedDay}\n                        setDay={setDay}\n                        logs={logs}\n                    />\n                </Box>\n                <Box flexGrow={1} m={2}>\n                    <Grid container justify=\"flex-end\">\n                        Total work time: {getTotalTime(logs)}\n                    </Grid>\n                </Box>\n                <Grid item xs={12}>\n                    <NoteTitle>Here you can log your working time</NoteTitle>\n                </Grid>\n                <ReportTable\n                    data={logs}\n                    projects={projectList}\n                    logTypes={logTypes}\n                    handleEditLog={handleEditLog}\n                    selectedDay={selectedDay}\n                    selectedWeek={selectedWeek}\n                />\n                <Grid item>\n                    <AddButton handleClick={showModal}>Add</AddButton>\n                </Grid>\n                {isModalVisible && (\n                    <ReportForm\n                        open={isModalVisible}\n                        handleClose={closeModal}\n                        projects={projectList}\n                        logTypes={logTypes}\n                        submitForm={handleSubmitForm}\n                        deleteLog={handleDeleteLog}\n                        initialData={editingLog}\n                        selectedDay={selectedDay}\n                    />\n                )}\n            </Grid>\n        </Container>\n    );\n}\n","// Core\nimport React from 'react'\n\nexport default function ManagerReports() {\n    return <div>manager-reports</div>\n}\n","// Core\nimport React, { useState, useEffect } from \"react\";\nimport { useObserver } from \"mobx-react\";\n// UI\nimport { Grid, Container, Typography } from \"@material-ui/core\";\nimport ProjectsTable from \"./ProjectsTable\";\nimport CreateProjectForm from \"./CreateProjectForm\";\nimport AddButton from \"components/AddButton\";\n\n// Utils\nimport { useStores } from \"../../store\";\n\n// Styled\nimport { StyledGrid } from \"./styles\";\n\nfunction useStore() {\n    const { userStore, projectStore } = useStores();\n\n    return useObserver(() => ({\n        projectList: projectStore.projectList,\n        projectTypes: projectStore.projectTypes,\n        userList: userStore.userList,\n        onGetProjectList: projectStore.onGetProjectList,\n        onGetUserList: userStore.onGetUserList,\n        onCreateProject: projectStore.onCreateProject,\n        onUpdateProject: projectStore.onUpdateProject,\n        onDeleteProject: projectStore.onDeleteProject,\n        onGetProjectTypes: projectStore.onGetProjectTypes,\n        setEditingProjectData: projectStore.setEditingProjectData,\n        editingProjectData: projectStore.editingProjectData,\n    }));\n}\n\nexport default function Projects() {\n    const [isModalVisible, setModalVisibility] = useState(false);\n\n    const {\n        projectList,\n        projectTypes,\n        userList,\n        onCreateProject,\n        onUpdateProject,\n        onGetProjectList,\n        onGetProjectTypes,\n        onGetUserList,\n        setEditingProjectData,\n        editingProjectData,\n        onDeleteProject,\n    } = useStore();\n\n    useEffect(() => {\n        onGetProjectList();\n        onGetProjectTypes();\n        onGetUserList();\n    }, [onGetProjectList, onGetProjectTypes, onGetUserList]);\n\n    useEffect(() => {\n        if (editingProjectData) {\n            showModal();\n        }\n    }, [editingProjectData]);\n\n    const showModal = () => {\n        setModalVisibility(true);\n    };\n\n    const closeModal = () => {\n        setModalVisibility(false);\n        setEditingProjectData();\n    };\n\n    const handleDeleteProject = id => {\n        onDeleteProject(id);\n        closeModal();\n    };\n\n    return (\n        <Container>\n            <Grid container>\n                <StyledGrid item xs={12}>\n                    <Typography variant=\"h6\">Available projects:</Typography>\n                </StyledGrid>\n                <Grid item xs={12}>\n                    <ProjectsTable\n                        projectList={projectList}\n                        setEditingProjectData={setEditingProjectData}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item xs>\n                <AddButton handleClick={showModal}>Create project</AddButton>\n            </Grid>\n            {isModalVisible && (\n                <CreateProjectForm\n                    open={isModalVisible}\n                    onClose={closeModal}\n                    userList={userList}\n                    projectTypes={projectTypes}\n                    handleSubmit={\n                        editingProjectData ? onUpdateProject : onCreateProject\n                    }\n                    initialData={editingProjectData}\n                    handleDeleteProject={handleDeleteProject}\n                />\n            )}\n        </Container>\n    );\n}\n","// Core\nimport React, { useState, useEffect } from \"react\";\nimport { useObserver } from \"mobx-react\";\n// UI\nimport { Grid, Container, Typography } from \"@material-ui/core\";\nimport DevelopersTable from \"./DevelopersTable\";\nimport CreateUserForm from \"./CreateUserForm\";\nimport AddButton from \"components/AddButton\";\n\n// Utils\nimport { useStores } from \"../../store\";\n\n//Styles\nimport { StyledGrid } from \"./styles\";\n\nfunction useStore() {\n    const { userStore } = useStores();\n\n    return useObserver(() => ({\n        userList: userStore.userList,\n        onGetUserList: userStore.onGetUserList,\n        setEditingUserData: userStore.setEditingUserData,\n        editingUserData: userStore.editingUserData,\n        onCreateUser: userStore.onCreateUser,\n        onUpdateUser: userStore.onUpdateUser,\n        onDeleteUser: userStore.onDeleteUser,\n    }));\n}\n\nexport default function Projects() {\n    const [isModalVisible, setModalVisibility] = useState(false);\n\n    const {\n        userList,\n        onGetUserList,\n        editingUserData,\n        setEditingUserData,\n        onCreateUser,\n        onUpdateUser,\n        onDeleteUser,\n    } = useStore();\n\n    const showModal = () => {\n        setModalVisibility(true);\n    };\n\n    const closeModal = () => {\n        setModalVisibility(false);\n        setEditingUserData();\n    };\n\n    const handleDeleteUser = id => {\n        onDeleteUser(id);\n        closeModal();\n    };\n\n    useEffect(() => {\n        onGetUserList();\n    }, [onGetUserList]);\n\n    useEffect(() => {\n        if (editingUserData) {\n            showModal();\n        }\n    }, [editingUserData]);\n\n    return (\n        <Container>\n            <Grid container>\n                <StyledGrid item xs={12}>\n                    <Typography variant=\"h6\">Developers:</Typography>\n                </StyledGrid>\n                <Grid item xs={12}>\n                    <DevelopersTable\n                        developerList={userList}\n                        setEditingUserData={setEditingUserData}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item xs>\n                <AddButton handleClick={showModal}>Add developer</AddButton>\n            </Grid>\n            {isModalVisible && (\n                <CreateUserForm\n                    open={isModalVisible}\n                    onClose={closeModal}\n                    handleSubmit={editingUserData ? onUpdateUser : onCreateUser}\n                    initialData={editingUserData}\n                    handleDeleteUser={handleDeleteUser}\n                />\n            )}\n        </Container>\n    );\n}\n","// Core\nimport React from 'react'\n\nexport default function ReportHistory() {\n    return <div>report-history</div>\n}\n","// Core\nimport React from 'react'\nimport {\n    Switch,\n    Route,\n    BrowserRouter as Router,\n    Redirect,\n} from 'react-router-dom'\n\n// Components\nimport NoMatch from 'components/NoMatch'\nimport NavigationPanel from 'components/NavigationPanel'\n\n// Routes\nimport routes from './routes'\n\nconst Navigation = (compProps) => (\n    <Router>\n        <NavigationPanel {...compProps} />\n        <Switch>\n            {routes.map((route, index) => (\n                <Route\n                    key={index}\n                    path={route.path}\n                    exact={route.exact}\n                    render={(props) => {\n                        return !route.rules ||\n                            route.rules.every((rule) => rule(compProps)) ? (\n                            <route.component {...props} />\n                        ) : (\n                            <Redirect to={{ pathname: '/' }} />\n                        )\n                    }}\n                />\n            ))}\n\n            <Route component={NoMatch} />\n        </Switch>\n    </Router>\n)\n\nexport default Navigation\n","import styled from 'styled-components'\n\nexport const FullScreenDisabler = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    pointer-events: none;\n    background: #000;\n    opacity: 0.5;\n`\n","// Core\nimport React from \"react\";\nimport { useObserver } from \"mobx-react\";\n\n// UI\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\n// Styles\nimport { FullScreenDisabler } from \"./styles\";\n\n// utils\nimport { useStores } from \"../../store\";\n\n// Hooks\nfunction useLoadingData() {\n    const { loadersStore } = useStores();\n\n    return useObserver(() => ({\n        isLoadingPage: loadersStore.isLoadingPage,\n    }));\n}\n\nconst PageLoader = () => {\n    const { isLoadingPage } = useLoadingData();\n\n    if (!isLoadingPage) return null;\n\n    return (\n        <>\n            <LinearProgress color=\"secondary\" />\n            <FullScreenDisabler />\n        </>\n    );\n};\n\nexport default PageLoader;\n","// Core\nimport React, { useEffect } from \"react\";\nimport { useObserver } from \"mobx-react\";\nimport get from \"lodash.get\";\n\n// UI\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport GlobalFonts from \"assets/fonts\";\n// Navigation\nimport Navigation from \"./navigation\";\n\n// Store\nimport { useStores } from \"./store\";\n\n// Components\nimport PageLoader from \"./components/PageLoader\";\n\n// Hooks\nfunction useAuthData() {\n    const {\n        authStore,\n        loadersStore: { setLoadingPage },\n    } = useStores();\n\n    return useObserver(() => ({\n        addAuthHeaderInterceptor: authStore.addAuthHeaderInterceptor,\n        dispatchLoginFulfilled: authStore.dispatchLoginFulfilled,\n        setInitialState: authStore.setInitialState,\n        onGetMe: authStore.onGetMe,\n        setLoadingPage: setLoadingPage,\n        me: authStore.me,\n        token: authStore.token,\n    }));\n}\n\nfunction App() {\n    const {\n        dispatchLoginFulfilled,\n        addAuthHeaderInterceptor,\n        setInitialState,\n        onGetMe,\n        setLoadingPage,\n        me,\n        token: myToken,\n    } = useAuthData();\n\n    useEffect(() => {\n        async function getTokenFromLocalStorage() {\n            try {\n                const token = localStorage.getItem(\"token\") || myToken;\n\n                if (token) {\n                    await addAuthHeaderInterceptor(token);\n                    const responseMe = await onGetMe();\n                    const me = await get(responseMe, \"data\", null);\n                    dispatchLoginFulfilled(me, token);\n                } else {\n                    setInitialState();\n                }\n                setLoadingPage(false);\n            } catch (e) {\n                console.error(e);\n                setLoadingPage(false);\n            }\n        }\n        if (!me) {\n            getTokenFromLocalStorage();\n        }\n    }, [\n        addAuthHeaderInterceptor,\n        dispatchLoginFulfilled,\n        me,\n        myToken,\n        onGetMe,\n        setInitialState,\n        setLoadingPage,\n    ]);\n\n    return (\n        <>\n            <PageLoader />\n            <Navigation me={me} />\n            <CssBaseline />\n            <GlobalFonts />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Core\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Provider } from \"mobx-react\";\n// Theme\nimport ThemeProvider from \"assets/styles/ThemeProvider\";\n// Components\nimport App from \"./App\";\n// Worker\nimport * as serviceWorker from \"./serviceWorker\";\n// Stores\nimport stores from \"./store\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n    <Provider {...stores}>\n        <Router history={history}>\n            <ThemeProvider>\n                <App />\n            </ThemeProvider>\n        </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}